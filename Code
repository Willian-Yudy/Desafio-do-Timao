#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <stdexcept>

using namespace std;

// ===== Classe Base =====
class BaseQuestion {
public:
    virtual void ask() const = 0;
    virtual bool checkAnswer(const string &answer) const = 0;
    virtual ~BaseQuestion() {}
};

// ===== Classe de M√∫ltipla Escolha =====
struct Option {
    char letter;
    string text;
    bool correct;
};

class MultipleChoiceQuestion : public BaseQuestion {
private:
    string question;
    vector<Option> options;
    string hint;
public:
    MultipleChoiceQuestion(string q, vector<Option> opts, string h)
        : question(q), options(opts), hint(h) {}

    void ask() const override {
        cout << "\n" << question << "\n";
        for (const auto &opt : options) {
            cout << opt.letter << ") " << opt.text << "\n";
        }
        cout << "Hint: " << hint << "\n";
    }

    bool checkAnswer(const string &answer) const override {
        for (const auto &opt : options) {
            if (toupper(answer[0]) == opt.letter) {
                return opt.correct;
            }
        }
        return false;
    }
};

// ===== Classe de Verdadeiro ou Falso =====
class TrueFalseQuestion : public BaseQuestion {
private:
    string question;
    bool correct;
public:
    TrueFalseQuestion(string q, bool c) : question(q), correct(c) {}

    void ask() const override {
        cout << "\n" << question << " (T/F)?\n";
    }

    bool checkAnswer(const string &answer) const override {
        if (toupper(answer[0]) == 'T') return correct;
        if (toupper(answer[0]) == 'F') return !correct;
        return false;
    }
};

// ===== Fun√ß√£o para criar perguntas =====
vector<unique_ptr<BaseQuestion>> buildQuestions() {
    vector<unique_ptr<BaseQuestion>> qs;

    qs.push_back(make_unique<MultipleChoiceQuestion>(
        "Em que ano o Corinthians foi fundado?",
        vector<Option>{{'A',"1908",false},{'B',"1910",true},{'C',"1912",false},{'D',"1914",false}},
        "In√≠cio da d√©cada de 1910"
    ));

    qs.push_back(make_unique<MultipleChoiceQuestion>(
        "Quem foi o advers√°rio na final do Mundial de 2012?",
        vector<Option>{{'A',"Chelsea",true},{'B',"Barcelona",false},{'C',"Bayern",false},{'D',"Real Madrid",false}},
        "Time ingl√™s"
    ));

    qs.push_back(make_unique<TrueFalseQuestion>(
        "O Corinthians ganhou a Libertadores em 2012", true
    ));

    return qs;
}

// ===== Fun√ß√£o principal =====
int main() {
    cout << "=== Desafio Tim√£o ===\n";

    auto questions = buildQuestions();
    int score = 0;

    for (const auto &q : questions) {
        q->ask();
        string answer;
        cout << "Resposta: ";
        cin >> answer;

        if (q->checkAnswer(answer)) {
            cout << "‚úÖ Correto!\n";
            score++;
        } else {
            cout << "‚ùå Errado!\n";
        }
    }

    cout << "\nPontua√ß√£o final: " << score << "/" << questions.size() << "\n";

    if (score >= 5) {
        cout << "Parab√©ns! Voc√™ √© um Gavi√£o! ü¶Ö\n";
    } else if (score <= 2) {
        cout << "Infelizmente... voc√™ √© palmeirense! üíö\n";
    }

    return 0;
}
