/* ----- Project: DESAFIO TIM√ÉO -----
PRG1006 Programming II - Assessment 3 13/08/2025
Autor: Willian Yudy Futema
Student number: 15160
 */

#include <iostream> 
#include <string>  
#include <vector>   
#include <memory>   
#include <cctype> 

//heran√ßa, polimorfismo, abstra√ß√£o (com classes base abstratas) e encapsulamento crucial para esse assessment
using namespace std; 

struct Opcao {
    char letra;
    string texto;
    bool correta;
};
// Heran√ßa e Polimorfismo 
class BaseQuestion {
protected:
    string enunciado;
    string dica;
public:
    BaseQuestion(string e, string d = "") : enunciado(e), dica(d) {}
    virtual ~BaseQuestion() = default;
    virtual void mostrar(bool mostrarDica = false) const = 0;
    virtual bool verificarResposta(char resp) const = 0;
    
    bool temDica() const { return !dica.empty(); }
};
// Heran√ßa
class MultipleChoiceQuestion : public BaseQuestion {
private:
    vector<Opcao> alternativas; 
public:
    MultipleChoiceQuestion(string e, vector<Opcao> alt, string d = "")
        : BaseQuestion(e, d), alternativas(move(alt)) {}
    void mostrar(bool mostrarDica = false) const override {
        cout << "\n" << enunciado << "\n";
        for (const auto& a : alternativas) {
            cout << "[" << a.letra << "] " << a.texto << "\n";
        }
        if (mostrarDica && temDica()) {
            cout << "(üí° Dica: " << dica << ")\n";
        }
    }

    // Polimorfismo
    bool verificarResposta(char resp) const override {
        resp = toupper(resp);
        for (const auto& a : alternativas) {
            if (a.letra == resp) return a.correta;
        }
        return false;
    }

    char pegarResposta(bool permitirDica) const {
        string entrada;
        while (true) {
            cout << "Sua resposta";
            if (permitirDica && !dica.empty()) cout << " (ou H para dica)";
            cout << ": ";
            cin >> entrada;
            if (entrada.empty()) continue;
            char r = toupper(entrada[0]);
            if (permitirDica && r == 'H' && !dica.empty()) return 'H';
            
            bool valida = false;
            for (const auto& a : alternativas) {
                if (a.letra == r) {
                    valida = true;
                    break;
                }
            }
            if(valida) return r;

            cout << "Op√ß√£o inv√°lida! Tente novamente.\n";
        }
    }
};

// Encapsulamento e Ocultamento de Informa√ß√£o 
class Player {
private:
    string nome;
    int estrelas = 0;
    int erros = 0;
public:
    // Construtor
    Player(string n = "Player") : nome(move(n)) {}
    
    // M√©todos Get e Set
    void addEstrela() { estrelas++; }
    void addErro() { erros++; }
    void reset() { estrelas = 0; erros = 0; }
    int getEstrelas() const { return estrelas; }
    int getErros() const { return erros; }
    string getNome() const { return nome; }

    string tituloFinal() const {
        if (estrelas >= 5) return "üèÜ Voc√™ √© um verdadeiro Gavi√£o Fiel! ü¶Ö";
        if (erros >= 3) return "üêñ Virou Palmeirense sem Mundial...";
        return "Terminou o jogo com " + to_string(estrelas) + " estrelas.";
    }
};
class QuizGame {
private:
    Player jogador;
    // Polimorfismo e Estrutura de Dados
    // Usamos um vetor de 'unique_ptr'. Isso permite armazenar diferentes tipos de perguntas
    // (qualquer classe que herde de 'BaseQuestion') e gerenciar a mem√≥ria de forma segura.
    vector<unique_ptr<BaseQuestion>> perguntas;

public:
    QuizGame(string nome) : jogador(nome) {}
    void adicionarPergunta(unique_ptr<BaseQuestion> q) {
        perguntas.push_back(move(q));
    }

    void iniciar() {
        jogador.reset();
        cout << "\n==============================\n";
        cout << "    DESAFIO DO TIM√ÉO ü¶Ö\n";
        cout << "==============================\n";
        cout << "Acertar 5 = Gavi√£o | Errar 3 = Palmeirense üêñ\n";

        for (auto &p : perguntas) {
            p->mostrar(false);
            // O uso de `p->pegarResposta` aqui √© um exemplo de polimorfismo.
            char resp = static_cast<MultipleChoiceQuestion*>(p.get())->pegarResposta(p->temDica());
            
            if (resp == 'H') {
                p->mostrar(true);
                resp = static_cast<MultipleChoiceQuestion*>(p.get())->pegarResposta(false);
            }

            if (p->verificarResposta(resp)) {
                cout << "‚úÖ Correto!\n";
                jogador.addEstrela();
            } else {
                cout << "‚ùå Errado!\n";
                jogador.addErro();
            }

            if (jogador.getEstrelas() >= 5 || jogador.getErros() >= 3) break;
        }

        cout << "\n===== RESULTADO FINAL =====\n";
        cout << jogador.tituloFinal() << "\n";
    }
};

// --- Fun√ß√£o principal (main) ---
// Ponto de entrada do programa, onde o jogo √© configurado e executado.
int main() {
    string nome;
    cout << "Digite seu nome: ";
    getline(cin, nome);
    if (nome.empty()) nome = "Player";

    QuizGame jogo(nome);

    // Adicionando as perguntas.
    // Usamos 'make_unique' para criar e gerenciar a vida √∫til dos objetos de pergunta.
    jogo.adicionarPergunta(make_unique<MultipleChoiceQuestion>(
        "1. Which year was Corinthians founded?",
        vector<Opcao>{{'A',"1910",true},{'B',"1920",false},{'C',"1905",false}},
        "Come√ßo da d√©cada de 1910"
    ));
    jogo.adicionarPergunta(make_unique<MultipleChoiceQuestion>(
        "2. How many world titles does Palmeiras have?",
        vector<Opcao>{{'A',"2",false},{'B',"1",false},{'C',"0 (51 √© pinga!)",true}},
        "51 is Cacha√ßa"
    ));
    jogo.adicionarPergunta(make_unique<MultipleChoiceQuestion>(
        "3. Which stadium is home to one of the biggest clubs in Brazil?",
        vector<Opcao>{{'A',"Morumbi",false},{'B',"Allianz Parque",false},
                       {'C',"Neo Qu√≠mica Arena üèüÔ∏è",true}},
        "√â a casa do Tim√£o "
    ));
    jogo.adicionarPergunta(make_unique<MultipleChoiceQuestion>(
        "4. Who is the top scorer for Corinthians at moment?",
        vector<Opcao>{{'A',"Memphis Depay",false},{'B',"Yuri Alberto",true},{'C',"Rodrigo Garro",false}},
        "Pai do Inter"
    ));
    jogo.adicionarPergunta(make_unique<MultipleChoiceQuestion>(
        "5. How many times has Corinthians won FIFA World Cup ‚öΩ?",
        vector<Opcao>{{'A',"4",false},{'B',"2",true},{'C',"3",false}},
        "2000 e 2012"
    ));
    char jogarNovamente;
    do {
        jogo.iniciar();
        cout << "\nDeseja jogar novamente? (S/N): ";
        cin >> jogarNovamente;
        jogarNovamente = toupper(jogarNovamente);
    } while (jogarNovamente == 'S');

    cout << "\nObrigado por jogar o Desafio Tim√£o!\n";
    return 0;
}
